from telebot import types
from datetime import datetime
import telebot

print('Bot is working now!')

bot = telebot.TeleBot('6571108770:AAEQwras-bZI_N49i6V4bRfOjHvZLvfJxQs', threaded=True, num_threads=300)
sender = telebot.TeleBot('6740671437:AAGR9Yekw2VlgUdAJdsBQWBkxIcjsXv8oCs', threaded=True, num_threads=300)

id = ''
init_vector = ''

@bot.message_handler(commands=['start'])
def hello(message):
    global id
    keyboard = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard = True)
    crypted_message = types.KeyboardButton(text = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    ID_user = types.KeyboardButton(text = "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID")
    help = types.KeyboardButton(text = "üõü–ü–æ–º–æ—â—å")
    escape = types.KeyboardButton(text = "‚¨á–°–∫—Ä—ã—Ç—å")

    keyboard.row(crypted_message)
    keyboard.row(ID_user, help)
    keyboard.row(escape)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, <b>{0.first_name}</b>\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoGram. –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ Telegram –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏. –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ @defqy_cryptogram_chat_bot. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è".format(message.from_user, bot.get_me()), reply_markup = keyboard, parse_mode='HTML')
    bot.send_message(message.chat.id, '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ç–æ–º, —á—Ç–æ —É –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Ö–æ—Ç—å —Ä–∞–∑ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –¥–∞–Ω–Ω—ã–π –±–æ—Ç (–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞) –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–ª—É—á–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è')
    keyboard.add(crypted_message, ID_user, escape)

def send_id(message):
    global ID_send
    ID_send = message.chat.id
    bot.send_message(message.forward_from.id, f'Name: <strong>{message.from_user.username}\nID: {ID_send}</strong> sent you his ID\nID: {ID_send}', parse_mode = 'HTML')

@bot.message_handler(content_types = ['text'])
def start(message):
    if message.text == '–£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID':
        bot.send_message(message.chat.id, f'Name - @{message.from_user.username}\nID - <code>{message.from_user.id}</code>\nFirst name - {message.from_user.first_name}\nLast name - {message.from_user.last_name}', parse_mode='HTML')

    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ':
        bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ id —Å–≤–æ–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø–∏—à–∏—Ç–µ <code>stop</code> - –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏)", parse_mode = 'HTML')
        bot.register_next_step_handler(message, get_id)

    elif message.text == 'üõü–ü–æ–º–æ—â—å':
        bot.send_message(message.chat.id, "CryptoGram - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ Telegram –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏")
    
    elif message.text == '‚¨á–°–∫—Ä—ã—Ç—å':
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!", reply_markup = types.ReplyKeyboardRemove())


def get_id(message):
    global id_user
    id_user = message.text
    try:
        current_datetime = datetime.now()
        current_datetime = current_datetime.strftime("%H:%M:%S %d.%m.%Y")
        sender.send_message(id_user, f'<b>{message.from_user.first_name}</b> is writing you a new message üòâ\n\nName - @{message.from_user.username}\nID - <code>{message.from_user.id}</code>\nFirst name - {message.from_user.first_name}\nLast name - {message.from_user.last_name}\n\nTime of typing: {current_datetime}', parse_mode = 'HTML')
        bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ <strong>–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ</strong> —Å–æ–æ–±—â–µ–Ω–∏–µ', parse_mode = 'HTML')
        bot.register_next_step_handler(message, get_msg)
    except:
        if id_user == 'stop':
            bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

        else:    
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ!')
            bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ id —Å–≤–æ–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
            bot.register_next_step_handler(message, get_id)

def get_msg(message):
    global msg
    msg = message.text
    bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
    bot.register_next_step_handler(message, get_init_vector)

def get_init_vector(message):
    global init_vector
    init_vector = message.text
    current_datetime = datetime.now()
    current_datetime = current_datetime.strftime("%H:%M:%S %d.%m.%Y")
    sender.send_message(id_user, f'<b>You have a new message: <code>{msg}</code></b>\nInitialization vector - <code>{init_vector}</code>\n\nSender:\nName - @{message.from_user.username}\nID - <code>{message.from_user.id}</code>\nFirst name - {message.from_user.first_name}\nLast name - {message.from_user.last_name}\n\nSending time: {current_datetime}', parse_mode='HTML')
    sender.send_message(message.from_user.id, f'<b>Your</b> message to <code>{id_user}</code>\n\n<b>Message: <code>{msg}</code></b>\nInitialization vector - <code>{init_vector}</code>\n\nSending time: {current_datetime}', parse_mode='HTML')
    bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
bot.infinity_polling()